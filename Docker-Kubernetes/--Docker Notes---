--Docker Notes---
*****************

# docker ps : To check all the running containers

# docker run <image id> : It's an equivalent command to create and start a container

# docker ps --all : To check all the previously executed containers

# docker stop <container id> : Give a bit a time to stop the container (10 secs or else docker kill will be executed automatically)

# docker kill <container id> : Kills the execution of the container instantly

# Eg: Suppose you run a redis server image and now you want to access the redis server inside the container using redis cli 

docker run redis-server : This starts the redis server 

docker ps : gives you  the redis server container id

docker exec -it <container id> redis-cli : This allows you to enter the container and execute the redis-cli command. 
Once you have gained access to the container, you can access the redis server through redis-cli commands

What's the purpose of IT flag : It is actually -i -t. -i is generally used as an input to the container from the terminal. While -t
is the format of the output you get back on the terminal. -i -t is similar to -it

# docker exec -it <container id> sh : To open the terminal inside container. Very important. Majorly used for debugging purposes

# docker run -it busybox sh : Can be used while running the image as well. 

#! Suppose we have two containers running in parallel, do remember that both the containers do not share a common harddisk. 

# Creating a DockerFile:
    - Specify a base image : FROM alpine > It's like providing an initial starting point. Like OS to create an image (Contains all pre-installed set   of programs) E.g: Alpine/ Linux/ MacOS etc. 
    - Run some commands to install programs : RUN apk add --update redis
    - Specify a commmand to run on container startup : CMD ['redis-server']

# What happens internally -
    - FROM :  It downloads an image (behaves like an OS that contains all programs for creating an image) and now 
      the docker file will use this image as  a base (or OS). 
    - RUN : Gets the image from the previous step, this image is used to create a temporary container, inside this container
      the command : apk add --update redis is executed and this creates a new file snapshot with the dependencies installed. 
      A new image with this snapshot is created. NOTE: We started with an image, now we have an image with redis server installed in it. 
    - CMD : Gets the image from the previous step, runs a temporary container, inside the contained we execute this command : 
      CMD ['redis-server']. A new file snapshot is captured and the temporary container is deleted.
      As there are no more steps, a new image is generated with all the above steps. Final image!

 # Port mapping  
      Any requests coming on localhost:8080 should be forwarded to a specific (8080 or any other port) in the container. 
      This we need to do because the container cannot access localhost directly

      docker run -p 8080 (localhost): 8080 (container port) <image id>

# Create a working directory inside Container
      /usr/app will be created in the container and copy will copy all the cwd files to the workdir (/usr/app)

      WORKDIR /usr/app 
      COPY ./ ./ 

# Docker compose
    This is used to run multiple containers at once. 

    docker-compose up: To start multiple containers
    docker-compose up --build: To build the containers and run the images
    docker-compose ps: To show the status of the containers. This should be done inside the folder where dockercompose.yml lies
    docker-compose down: To stop the all the containers

# To build a docker file with specific name
    docker build -f Dockerfile.dev . (Dockerfile.dev is the name of Docker file)

# Docker volumes
  Docker volumes is used as a reference to the local folder such that any changes happening in the local folder can be replicated 
  inside the docker container as well

  docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app <image_id>
  
  /app/node_modules: Book marking node modules folder in the local. This means that this folder should not be mapped to anything. Do not mess with this folder. AS these files might be already installed in the container, it's better to not map it at all. 
  $(pwd):/app: Map the pwd (present working directory) into '/app' folder within the container. So here the pwd will be your local project folder.
  Whatever is inside the local project folder, map everything to the /app folder inside the container

# Multi-step Build 
  Having multi-step builds, it is possible to use two base images at a time. 
  for example: Check -> project/frontend/Dockerfile
  This file is divided into two phases. Build phase and run phase. 
  Build phase is "npm run build" to build /app/build and run phase is to copy the build file and paste it inside the nginx container

  COPY --from=builder /app/build/ /usr/share/nginx/html